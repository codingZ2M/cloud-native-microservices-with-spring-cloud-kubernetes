 Making Microservices Resilient - Handling Failures Gracefully with Fallback Mechanism using RESILIENCE4J Fault Tolerance Library 
 by Implementing Circuit Breaker Pattern
 
 Note: You can have any number of Circuit Breaker patterns with different configurations for your API's

Add the following dependency
<dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-circuitbreaker-reactor-resilience4j</artifactId>
        </dependency> 
Add the configurations for the Circuit Breaker patterns in the application.properties.

And, then apply the Circuit Breaker patterns in the required controller methods which are handling REST API calls and also create Fallback methods
to send fast response when Circuit Breaker is open during failures.

Testing:
Start Eureka Server, Spring Config Server and your MutualFund microservice but but the SavingsAccount microservice, send a request to create a new Mutual Fund and see how Circuit Breaker is handling failures gracefully with fallback mechanism behind the scene.

Open the Actuator hosted on the Mutual Fund microservice, at http://localhost:8083/actuator
And, then open the endpoint, http://localhost:8083/actuator/circuitbreakers and see all the circuit breakers that are registered.

Monitor the Events which are happening inside Circuit Breaker, open the Endpoint..
http://localhost:8083/actuator/circuitbreakerevents/{name}

Send 6 (At least 5 calls must be recorded) requests to MutualFund service to create a new Mutual Fund, after sending 5 requests, track the events of circuit breaker at http://localhost:8083/actuator/circuitbreakerevents/mutualFundProcessState
==========================================================================================

Implementing Retry pattern with Resilience4J in Spring Boot Microservices

Configurations for Retry Pattern with Resilience4j:

# Indicates that Retry has to register all its urls to be exposed using Actuator
resilience4j.circuitbreaker.configs.default.register-health-indicator=true
# What is the number of attempts to invoke
resilience4j.retry.instances.retryFormutualFundProcess.max-attempts=3
# Rety with the duration of 2secs
resilience4j.retry.instances.retryFormutualFundProcess.wait-duration=2000

Retry with Fallback method
@Retry(name = "retryFormutualFundProcess", fallbackMethod="mutualFundProcessStateFallBack" )

Testing:
Send a request to MutualFund service to create a new Mutual Fund, even though you send a request to invoke the Savings Account  only one time, this Retry pattern will invoke three times (Check it in the console of SavingsAccount).
Note: It will take good amount of time as it retries multiple times in the backend.
